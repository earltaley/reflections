What happens when you initialize a repository? Why do you need to do it?

Initialize a repository creates an empty Git repository. You need to do this in order to set up for tracking your files and creating a git log of changes between versions. The repository holds "backups".
=====================================================================

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different because it's where you are setting up its files to be committed. You assign via 'git add' command which files to be staged for the repository.

The staging area offers a benefit of grouping multiple files together for a single commit. (Can you also remove from staging area? If so, the benefit is generally more control over your commits.)
=====================================================================

How can you use the staging area to make sure you have one commit per logical change?

Combine each logical change into one commit by adding files to staging area first, together, then do a single commit for them.
=====================================================================

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when you're creating different modifications that you may or may not use in the future. You can commit various versions of that branch, but also access the originals.
=====================================================================

How do the diagrams help you visualize the branch structure?

The diagrams show where commits are connected and where they branch off. You can see which is master, and identify any unreachable versions.

=====================================================================

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

You get the insertions and deletions from both branches as compared to their original parents.

We represent it in the diagram so that you can understand the parents and branches. That way you can merge and delete branch names correctly afterwards.

=====================================================================

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When you merge 2 branches together, you have a version that has information about both parent versions (keep the git log history).

We represent it in the diagram in such a way that we see where versions meet and diverge.






